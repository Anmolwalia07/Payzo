// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  name               String
  email              String               @unique
  password           String
  balance            balance?
  balanceHistory     balanceHistory[]
  OnRampTransaction  OnRampTransaction[]
  offRampTransaction offRampTransaction[]
  transactions  PaymentTransaction[]
  status         String               @default("Active")
  devices            Device[]      
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt @default(now())
}

model Device {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  ipAddress   String
  browser     String
  os          String
  isCurrent   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  lastUsedAt  DateTime  @updatedAt
  visitorId   String   @unique
  session     String   @default(" A")
}



model balance{
  id  Int @id @default(autoincrement())
  userId Int @unique
  amount Int
  locked Int
  user  User @relation(fields: [userId] , references: [id])
}

model balanceHistory{
  id Int  @id  @default(autoincrement())
  userId Int 
  balance Int
  createdAt DateTime @default(now())
  user  User @relation(fields: [userId] , references: [id])
}

 model OnRampTransaction {
  id        Int          @id @default(autoincrement())
  status    OnRampStatus
  token     String       @unique
  provider  String
  amount    Int
  startTime DateTime
  onRamp  Boolean  @default(true)
  userId    Int
  user      User         @relation(fields: [userId], references: [id])

}




model  offRampTransaction {
  id        Int          @id @default(autoincrement())
  status    OnRampStatus
  token     String       @unique
  provider  String
  amount    Int
  startTime DateTime
  offRamp  Boolean  @default(true)
  userId    Int  
  user      User        @relation(fields: [userId], references: [id])

}

enum OnRampStatus{
   Success
  Failure
  Processing
}


model Merchant {
  id            Int               @id @default(autoincrement())
  name          String
  email         String               @unique
  password      String?
  balance       balanceMerchant?
  balancehistroy balanceHistoryMerchant[]
  offRampTransaction offRampTransactionMerchant[]
  category      String
  rating        Float
  reviewCount   Int
  transactions  PaymentTransaction[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt @default(now())
}


model balanceHistoryMerchant{
  id Int  @id  @default(autoincrement())
  merchantId Int 
  balance Int
  createdAt DateTime @default(now())
  Merchant  Merchant @relation(fields: [merchantId] , references: [id])
}


model  offRampTransactionMerchant {
  id        Int          @id @default(autoincrement())
  status    OnRampStatus
  token     String       @unique
  provider  String
  amount    Int
  startTime DateTime
  offRamp  Boolean  @default(true)
  merchantId    Int  
  Merchant      Merchant        @relation(fields: [merchantId], references: [id])
}

model balanceMerchant{
  id  Int @id @default(autoincrement())
  merchantId Int @unique
  amount Int
  locked Int
  merchant  Merchant @relation(fields: [merchantId] , references: [id])
}


model PaymentTransaction {
  id           Int           @id @default(autoincrement())
  merchant     Merchant       @relation(fields: [merchantId], references: [id])
  merchantId   Int
  merchantName String
  amount       Int
  date         DateTime
  status       PaymentStatus
  type         PaymentType
  user         User           @relation(fields: [userId], references: [id])
  userId       Int
}

enum PaymentStatus {
  completed
  pending
  failed
}

enum PaymentType {
  payment
  refund
}

model Admin{
  id   Int  @id @default(autoincrement())
  name String @default("Admin")
  email String @unique
  password String 
}